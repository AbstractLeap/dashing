namespace Dashing.Engine {
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Linq.Expressions;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;
    using Dashing.Engine.DML;

    public class SqlEngine : IEngine {
        private readonly ISqlDialect dialect;

        private IConfiguration configuration;

        private ISelectWriter selectWriter;

        private IUpdateWriter updateWriter;

        private IInsertWriter insertWriter;

        private IDeleteWriter deleteWriter;

        public IConfiguration Configuration {
            get {
                return this.configuration;
            }

            set {
                this.configuration = value;
                this.selectWriter = new SelectWriter(this.dialect, this.Configuration);
                this.deleteWriter = new DeleteWriter(this.dialect, this.Configuration);
                this.updateWriter = new UpdateWriter(this.dialect, this.Configuration);
                this.insertWriter = new InsertWriter(this.dialect, this.Configuration);
            }
        }

        public SqlEngine(ISqlDialect dialect) {
            this.dialect = dialect;
        }

        public IEnumerable<T> Query<T, TPrimaryKey>(IDbConnection connection, IEnumerable<TPrimaryKey> ids) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateGetSql<T, TPrimaryKey>(ids);
            return this.Configuration.CodeManager.Query<T>(sqlQuery, connection, this.Configuration.GetIsTrackedByDefault);
        }

        public IEnumerable<T> QueryTracked<T, TPrimaryKey>(IDbConnection connection, IEnumerable<TPrimaryKey> ids) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateGetSql<T, TPrimaryKey>(ids);
            return this.Configuration.CodeManager.Query<T>(sqlQuery, connection, true);
        }

        public virtual IEnumerable<T> Query<T>(IDbConnection connection, SelectQuery<T> query) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateSql(query);
            return this.Configuration.CodeManager.Query(sqlQuery, query, connection);
        }

        public virtual int Execute<T>(IDbConnection connection, InsertEntityQuery<T> query) {
            this.EnsureConfigurationLoaded();
            foreach (var entity in query.Entities) {
                var sqlQuery = this.insertWriter.GenerateSql(entity);
                this.Configuration.CodeManager.Execute(sqlQuery.Sql, connection, sqlQuery.Parameters);

                var map = this.Configuration.GetMap<T>();
                if (map.PrimaryKey.IsAutoGenerated) {
                    var idQuery = this.insertWriter.GenerateGetIdSql<T>();
                    var id = this.Configuration.CodeManager.Query<int>(connection, idQuery).First();
                    this.Configuration.GetMap<T>().SetPrimaryKeyValue(entity, id);
                }
            }

            return query.Entities.Count;
        }

        public virtual int Execute<T>(IDbConnection connection, UpdateEntityQuery<T> query) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.updateWriter.GenerateSql(query);
            return sqlQuery.Sql.Length == 0 ? 0 : this.Configuration.CodeManager.Execute(sqlQuery.Sql, connection, sqlQuery.Parameters);
        }

        public virtual int Execute<T>(IDbConnection connection, DeleteEntityQuery<T> query) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.deleteWriter.GenerateSql(query);
            return this.Configuration.CodeManager.Execute(sqlQuery.Sql, connection, sqlQuery.Parameters);
        }

        public int Execute<T>(IDbConnection connection, Action<T> update, IEnumerable<Expression<Func<T, bool>>> predicates) {
            this.EnsureConfigurationLoaded();
            // generate a tracking class, apply the update, read out the updates
            var updateClass = this.Configuration.CodeManager.CreateUpdateInstance<T>();
            update(updateClass);
            var sqlQuery = this.updateWriter.GenerateBulkSql(updateClass, predicates);

            return sqlQuery.Sql.Length == 0 ? 0 : this.Configuration.CodeManager.Execute(sqlQuery.Sql, connection, sqlQuery.Parameters);
        }

        public int ExecuteBulkDelete<T>(IDbConnection connection, IEnumerable<Expression<Func<T, bool>>> predicates) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.deleteWriter.GenerateBulkSql(predicates);
            return this.Configuration.CodeManager.Execute(sqlQuery.Sql, connection, sqlQuery.Parameters);
        }

        private void EnsureConfigurationLoaded() {
            if (this.configuration == null) {
                throw new InvalidOperationException("Configuration was not injected into the Engine properly");
            }
        }
    }
}