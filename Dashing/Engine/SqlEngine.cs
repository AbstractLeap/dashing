namespace Dashing.Engine {
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Linq.Expressions;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;
    using Dashing.Engine.DML;

    public class SqlEngine : IEngine {
        private readonly ISqlDialect dialect;

        private IConfiguration configuration;

        private ISelectWriter selectWriter;

        private IUpdateWriter updateWriter;

        private IInsertWriter insertWriter;

        private IDeleteWriter deleteWriter;

        public ISqlDialect SqlDialect {
            get {
                return this.dialect;
            }
        }

        public IConfiguration Configuration {
            get {
                return this.configuration;
            }

            set {
                this.configuration = value;
                this.selectWriter = new SelectWriter(this.dialect, this.Configuration);
                this.deleteWriter = new DeleteWriter(this.dialect, this.Configuration);
                this.updateWriter = new UpdateWriter(this.dialect, this.Configuration);
                this.insertWriter = new InsertWriter(this.dialect, this.Configuration);
            }
        }

        public SqlEngine(ISqlDialect dialect) {
            this.dialect = dialect;
        }

        public IEnumerable<T> Query<T, TPrimaryKey>(IDbTransaction transaction, IEnumerable<TPrimaryKey> ids) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateGetSql<T, TPrimaryKey>(ids);
            return this.Configuration.CodeManager.Query<T>(sqlQuery, transaction, this.Configuration.GetIsTrackedByDefault);
        }

        public IEnumerable<T> QueryTracked<T, TPrimaryKey>(IDbTransaction transaction, IEnumerable<TPrimaryKey> ids) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateGetSql<T, TPrimaryKey>(ids);
            return this.Configuration.CodeManager.Query<T>(sqlQuery, transaction, true);
        }

        public virtual IEnumerable<T> Query<T>(IDbTransaction transaction, SelectQuery<T> query) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.selectWriter.GenerateSql(query);
            if (sqlQuery.NumberCollectionsFetched > 0 && (query.TakeN > 0 || query.SkipN > 0)) {
                IEnumerable<T> results = this.Configuration.CodeManager.Query(
                    sqlQuery,
                    query,
                    transaction);
                if (query.TakeN > 0) {
                    results.Take(query.TakeN);
                }

                if (query.SkipN > 0) {
                    results.Skip(query.SkipN);
                }

                return results;
            }

            return this.Configuration.CodeManager.Query(sqlQuery, query, transaction);
        }

        public virtual int Insert<T>(IDbTransaction transaction, IEnumerable<T> entities) {
            this.EnsureConfigurationLoaded();

            var i = 0;
            var map = this.Configuration.GetMap<T>();
            var getLastInsertedId = this.insertWriter.GenerateGetIdSql<T>();

            foreach (var entity in entities) {
                var sqlQuery = this.insertWriter.GenerateSql(entity);
                this.Configuration.CodeManager.Execute(sqlQuery.Sql, transaction, sqlQuery.Parameters);
                
                if (map.PrimaryKey.IsAutoGenerated) {
                    map.SetPrimaryKeyValue(entity, this.Configuration.CodeManager.Query<int>(transaction, getLastInsertedId).Single());
                }
                
                ++i;
            }

            return i;
        }

        public virtual int Save<T>(IDbTransaction transaction, IEnumerable<T> entities) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.updateWriter.GenerateSql(entities);
            return sqlQuery.Sql.Length == 0 ? 0 : this.Configuration.CodeManager.Execute(sqlQuery.Sql, transaction, sqlQuery.Parameters);
        }

        public virtual int Delete<T>(IDbTransaction transaction, IEnumerable<T> entities) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.deleteWriter.GenerateSql(entities);
            return this.Configuration.CodeManager.Execute(sqlQuery.Sql, transaction, sqlQuery.Parameters);
        }

        public int Execute<T>(IDbTransaction transaction, Action<T> update, IEnumerable<Expression<Func<T, bool>>> predicates) {
            this.EnsureConfigurationLoaded();

            // generate a tracking class, apply the update, read out the updates
            var updateClass = this.Configuration.CodeManager.CreateUpdateInstance<T>();
            update(updateClass);
            var sqlQuery = this.updateWriter.GenerateBulkSql(updateClass, predicates);

            return sqlQuery.Sql.Length == 0 ? 0 : this.Configuration.CodeManager.Execute(sqlQuery.Sql, transaction, sqlQuery.Parameters);
        }

        public int ExecuteBulkDelete<T>(IDbTransaction transaction, IEnumerable<Expression<Func<T, bool>>> predicates) {
            this.EnsureConfigurationLoaded();
            var sqlQuery = this.deleteWriter.GenerateBulkSql(predicates);
            return this.Configuration.CodeManager.Execute(sqlQuery.Sql, transaction, sqlQuery.Parameters);
        }

        private void EnsureConfigurationLoaded() {
            if (this.configuration == null) {
                throw new InvalidOperationException("Configuration was not injected into the Engine properly");
            }
        }
    }
}