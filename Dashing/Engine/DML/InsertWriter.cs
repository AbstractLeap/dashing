namespace Dashing.Engine.DML {
    using System;
    using System.Collections.Concurrent;
    using System.Linq;
    using System.Text;

    using Dapper;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;

    internal class InsertWriter : IInsertWriter {
        public InsertWriter(ISqlDialect dialect, IConfiguration config) {
            this.dialect = dialect;
            this.configuration = config;
        }

        private static readonly ConcurrentDictionary<WriterQueryCacheKey, string> QueryCache = new ConcurrentDictionary<WriterQueryCacheKey, string>();

        private readonly ISqlDialect dialect;

        private readonly IConfiguration configuration;

        public string GenerateGetIdSql<T>() {
            return this.dialect.GetIdSql();
        }

        public SqlWriterResult GenerateSql<T>(T entity) {
            var map = this.configuration.GetMap<T>();
            var sql = QueryCache.GetOrAdd(new WriterQueryCacheKey(this.configuration, typeof(T)), t => this.ReallyGenerateSql(map, entity));
            var parameters = new DynamicParameters();
            this.GenerateValuesSpec(null, parameters, map, entity, false, true);
            return new SqlWriterResult(sql, parameters);
        }

        private string ReallyGenerateSql<T>(IMap<T> map, T entity) {
            var sql = new StringBuilder();
            this.GenerateColumnSpec(sql, map);
            this.GenerateValuesSpec(sql, null, map, entity, true, false);
            return sql.ToString();
        }

        private void GenerateColumnSpec(StringBuilder sql, IMap map) {
            sql.Append("insert into ");
            this.dialect.AppendQuotedTableName(sql, map);
            sql.Append(" (");

            foreach (var column in map.OwnedColumns(true).Where(c => !c.IsAutoGenerated).OrderBy(k => k.Name)) {
                this.dialect.AppendQuotedName(sql, column.DbName);
                sql.Append(", ");
            }

            sql.Remove(sql.Length - 2, 2);
            sql.Append(") values ");
        }

        private void GenerateValuesSpec<T>(StringBuilder sql, DynamicParameters parameters, IMap<T> map, T entity, bool generateSql, bool fillParams) {
            var paramIdx = 0;
            if (generateSql) {
                sql.Append("(");
            }

            foreach (var column in map.OwnedColumns(true).Where(c => !c.IsAutoGenerated).OrderBy(k => k.Name)) {
                var paramName = "@p_" + ++paramIdx;
                if (generateSql) {
                    sql.Append(paramName);
                    sql.Append(", ");
                }

                if (!fillParams) {
                    continue;
                }

                if (column.Relationship == RelationshipType.None) {
                    parameters.Add(paramName, map.GetColumnValue(entity, column), column.DbType);
                }
                else {
                    var relatedEntity = map.GetColumnValue(entity, column);
                    if (relatedEntity != null) {
                        parameters.Add(paramName, this.configuration.GetMap(column.Type).GetPrimaryKeyValue(relatedEntity), column.DbType);
                    }
                    else {
                        parameters.Add(paramName, null, column.DbType);
                    }
                }
            }

            if (generateSql) {
                sql.Remove(sql.Length - 2, 2);
                sql.Append(")");
            }
        }
    }
}