namespace Dashing.Engine.Dialects {
    using System;
    using System.Data;
    using System.Text;

    using Dashing.Configuration;
    using Dashing.Extensions;

    public abstract class SqlDialectBase : ISqlDialect {
        protected char BeginQuoteCharacter { get; set; }

        protected char EndQuoteCharacter { get; set; }

        public SqlDialectBase(char beginQuoteCharacter = '"', char endQuoteCharacter = '"') {
            this.BeginQuoteCharacter = beginQuoteCharacter;
            this.EndQuoteCharacter = endQuoteCharacter;
        }

        public void AppendQuotedName(StringBuilder sql, string name) {
            sql.Append(this.BeginQuoteCharacter);
            sql.Append(name);
            sql.Append(this.EndQuoteCharacter);
        }

        public virtual void AppendQuotedTableName(StringBuilder sql, IMap map) {
            this.AppendQuotedName(sql, map.Table);
        }

        public virtual void AppendColumnSpecification(StringBuilder sql, IColumn column, bool scriptDefault = true) {
            this.AppendQuotedName(sql, column.DbName);
            sql.Append(" ");
            this.AppendColumnSpecificationWithoutName(sql, column, scriptDefault);
        }

        protected void AppendColumnSpecificationWithoutName(StringBuilder sql, IColumn column, bool scriptDefault = true) {
            sql.Append(this.TypeName(column.DbType));

            if (column.DbType.TypeTakesLength()) {
                sql.Append("(");
                if (column.MaxLength) {
                    sql.Append("max");
                }
                else {
                    sql.Append(column.Length);
                }


                sql.Append(")");
            }

            if (column.DbType.TypeTakesPrecisionAndScale()) {
                this.AppendPrecisionAndScale(sql, column.Precision, column.Scale);
            }

            sql.Append(column.IsNullable ? " null" : " not null");

            if (scriptDefault && !string.IsNullOrEmpty(column.Default) && !column.IsPrimaryKey && !column.IsAutoGenerated) {
                sql.Append(" default (").Append(column.Default).Append(")");
            }

            if (column.IsAutoGenerated) {
                this.AppendAutoGenerateModifier(sql, column);
            }

            if (column.IsPrimaryKey) {
                sql.Append(" primary key");
            }
        }

        public virtual void AppendEscaped(StringBuilder sql, string s) {
            sql.Append(s.Replace("'", "''"));
        }

        protected virtual void AppendPrecisionAndScale(StringBuilder sql, byte precision, byte scale) {
            sql.Append("(");
            sql.Append(precision);
            sql.Append(",");
            sql.Append(scale);
            sql.Append(")");
        }

        protected virtual void AppendAutoGenerateModifier(StringBuilder sql, IColumn column) {
            sql.Append(" generated always as identity");
        }

        protected virtual string TypeName(DbType type) {
            switch (type) {
                case DbType.AnsiString:
                    return "varchar";

                case DbType.AnsiStringFixedLength:
                    return "char";

                case DbType.Binary:
                    return "varbinary(max)";

                case DbType.Boolean:
                    return "boolean";

                case DbType.Byte:
                    return "tinyint unsigned";

                case DbType.Currency:
                    return "money";

                case DbType.Date:
                    return "date";

                case DbType.DateTime:
                    return "datetime";

                case DbType.DateTime2:
                    return "datetime2";

                case DbType.DateTimeOffset:
                    return "datetimeoffset";

                case DbType.Decimal:
                    return "decimal";

                case DbType.Double:
                    return "float";

                case DbType.Guid:
                    return "char(36)";

                case DbType.Int16:
                    return "smallint";

                case DbType.Int32:
                    return "int";

                case DbType.Int64:
                    return "bigint";

                case DbType.Single:
                    return "real";

                case DbType.String:
                    return "nvarchar";

                case DbType.StringFixedLength:
                    return "nchar";

                case DbType.Time:
                    return "time";

                case DbType.SByte:
                    return "tinyint";

                case DbType.UInt16:
                    return "smallint unsigned";

                case DbType.UInt32:
                    return "int unsigned";

                case DbType.UInt64:
                    return "bigint unsigned";

                case DbType.Xml:
                    return "xml";

                default:
                    throw new NotSupportedException("Unsupported type " + type);
            }
        }

        public abstract string ChangeColumnName(IColumn fromColumn, IColumn toColumn);

        public abstract string ModifyColumn(IColumn fromColumn, IColumn toColumn);

        public abstract string DropForeignKey(ForeignKey foreignKey);

        public abstract string DropIndex(Index index);

        public virtual string CreateIndex(Index index) {
            var sql = new StringBuilder(128);
            sql.Append("create ");
            if (index.IsUnique) {
                sql.Append("unique ");
            }

            sql.Append("index ");
            this.AppendQuotedName(sql, index.Name);
            sql.Append(" on ");
            this.AppendQuotedTableName(sql, index.Map);
            sql.Append(" (");
            foreach (var column in index.Columns) {
                this.AppendQuotedName(sql, column.DbName);
                sql.Append(", ");
            }

            sql.Remove(sql.Length - 2, 2);
            sql.Append(")");
            return sql.ToString();
        }

        public abstract void AppendForUpdateUsingTableHint(StringBuilder tableSql);

        public abstract void AppendForUpdateOnQueryFinish(StringBuilder sql);

        public virtual string OnBeforeDropColumn(IColumn column) {
            return string.Empty;
        }

        public abstract string ChangeTableName(IMap @from, IMap to);

        public virtual string GetIdSql() {
            return "select @@identity id";
        }

        public virtual string WriteDropTableIfExists(string tableName) {
            var sql = new StringBuilder();
            sql.Append("if exists (select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '");
            this.AppendEscaped(sql, tableName);
            sql.Append("') drop table ");
            this.AppendQuotedName(sql, tableName);
            return sql.ToString();
        }

        public abstract void ApplySkipTake(StringBuilder sql, StringBuilder orderClause, int take, int skip);
    }
}