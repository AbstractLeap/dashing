namespace Dashing.Configuration {
    using System;
    using System.Collections.Generic;

    /// <summary>
    ///     The Convention interface.
    /// </summary>
    public interface IConvention {
        /// <summary>
        ///     Identifies the table name for an entity type
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <returns>
        ///     The <see cref="string" />.
        /// </returns>
        string TableFor(Type entity);

        /// <summary>
        /// Identifies the table name for the history table relating to this temporal table
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        string HistoryTableFor(Type entity);

        /// <summary>
        ///     Identifies the schema name for an entity type (if specified, else null for the default schema)
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <returns>
        ///     The <see cref="string" />.
        /// </returns>
        string SchemaFor(Type entity);

        /// <summary>
        ///     Identifies the primary key name for a given entity
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <param name="propertyNames">
        ///     List of property names to choose from
        /// </param>
        /// <returns>
        ///     The property name of the primary key.
        /// </returns>
        string PrimaryKeyFor(Type entity, IEnumerable<string> propertyNames);

        /// <summary>
        ///     Identifies whether the primary key is auto-generated for a given entity
        /// </summary>
        /// <param name="primaryKeyColumn">
        ///     The entity.
        /// </param>
        /// <returns>
        ///     The <see cref="bool" />.
        /// </returns>
        bool IsPrimaryKeyAutoGenerated(IColumn primaryKeyColumn);

        /// <summary>
        ///     Specifies the string length for a property
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <param name="propertyName">
        ///     The property Name.
        /// </param>
        /// <returns>
        ///     The <see cref="ushort" />.
        /// </returns>
        ushort StringLengthFor(Type entity, string propertyName);

        /// <summary>
        ///     Specifies the decimal precision for a property
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <param name="propertyName">
        ///     The property Name.
        /// </param>
        /// <returns>
        ///     The <see cref="byte" />.
        /// </returns>
        byte DecimalPrecisionFor(Type entity, string propertyName);

        /// <summary>
        ///     Specifies the decimal scale for a property
        /// </summary>
        /// <param name="entity">
        ///     The entity.
        /// </param>
        /// <param name="propertyName">
        ///     The property Name.
        /// </param>
        /// <returns>
        ///     The <see cref="byte" />.
        /// </returns>
        byte DecimalScaleFor(Type entity, string propertyName);

        /// <summary>
        /// Specifies the datetime2 precision for a property
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        byte DateTime2PrecisionFor(Type entity, string propertyName);

        /// <summary>
        /// Specifies whether a column should be auto-initialised via the contructor by weaving
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        bool IsCollectionInstantiationAutomatic(Type entity, string propertyName);
    }
}