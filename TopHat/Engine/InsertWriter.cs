namespace TopHat.Engine
{
    using System;
    using System.Collections.Concurrent;
    using System.Text;

    using Dapper;

    using TopHat.Configuration;

    internal class InsertWriter : IInsertWriter
    {
        public InsertWriter(ISqlDialect dialect, IConfiguration config)
        {
            this.dialect = dialect;
            this.configuration = config;
        }

        private static ConcurrentDictionary<Type, string> queryCache = new ConcurrentDictionary<Type, string>();

        private ISqlDialect dialect;

        private IConfiguration configuration;

        public string GenerateGetIdSql<T>() {
            return this.dialect.GetIdSql();
        }

        public SqlWriterResult GenerateSql<T>(T entity)
        {
            var map = this.configuration.GetMap<T>();
            var sql = queryCache.GetOrAdd(typeof(T), t => this.ReallyGenerateSql<T>(map, entity));
            var parameters = new DynamicParameters();
            this.GenerateValuesSpec(null, parameters, map, entity, false, true);
            return new SqlWriterResult(sql, parameters);
        }

        private string ReallyGenerateSql<T>(IMap<T> map, T entity)
        {
            var sql = new StringBuilder();
            this.GenerateColumnSpec(sql, map);
            this.GenerateValuesSpec(sql, null, map, entity, true, false);
            return sql.ToString();
        }

        private void GenerateValuesSpec<T>(StringBuilder sql, DynamicParameters parameters, IMap<T> map, T entity, bool generateSql, bool fillParams)
        {
            var paramIdx = 0;
            if (generateSql)
            {
                sql.Append("(");
            }

            foreach (var column in map.Columns)
            {
                if (column.Value.Relationship == RelationshipType.None || column.Value.Relationship == RelationshipType.ManyToOne)
                {
                    if (column.Value == map.PrimaryKey && map.PrimaryKey.IsAutoGenerated)
                    {
                        continue;
                    }

                    var paramName = "@p_" + ++paramIdx;
                    if (generateSql) {
                        sql.Append(paramName);
                        sql.Append(", ");
                    }

                    if (fillParams) {
                        if (column.Value.Relationship == RelationshipType.None) {
                            parameters.Add(paramName, map.GetColumnValue(entity, column.Value));
                        }
                        else {
                            var relatedEntity = map.GetColumnValue(entity, column.Value);
                            if (relatedEntity != null) {
                                parameters.Add(paramName, this.configuration.GetMap(column.Value.Type).GetPrimaryKeyValue(relatedEntity));
                            }
                            else {
                                parameters.Add(paramName, null);
                            }
                        }
                    }
                }
            }

            if (generateSql) {
                sql.Remove(sql.Length - 2, 2);
                sql.Append(")");
            }
        }

        private void GenerateColumnSpec<T>(StringBuilder sql, IMap<T> map)
        {
            sql.Append("insert into ");
            this.dialect.AppendQuotedTableName(sql, map);
            sql.Append(" (");
            foreach (var column in map.Columns)
            {
                if (column.Value.Relationship == RelationshipType.None || column.Value.Relationship == RelationshipType.ManyToOne)
                {
                    if (column.Value == map.PrimaryKey && map.PrimaryKey.IsAutoGenerated)
                    {
                        continue;
                    }

                    this.dialect.AppendQuotedName(sql, column.Value.DbName);
                    sql.Append(", ");
                }
            }

            sql.Remove(sql.Length - 2, 2);
            sql.Append(") values ");
        }
    }
}