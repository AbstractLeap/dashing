namespace TopHat.Tests.Engine {
    using System.Data;
    using System.Text;

    using TopHat.Configuration;
    using TopHat.Engine;

    using Xunit;

    public class SqlServerDialectBaseTests {
        [Fact]
        public void UsesSqlServerEscapes() {
            var sb = new StringBuilder();
            this.MakeTarget().AppendQuotedName(sb, "foo");

            Assert.Equal("[foo]", sb.ToString());
        }

        [Fact]
        public void UsesSqlServerEscapeForTables() {
            var sb = new StringBuilder();
            var map = new Map<int> { Table = "foo" };
            this.MakeTarget().AppendQuotedTableName(sb, map);

            Assert.Equal("[foo]", sb.ToString());
        }

        [Fact]
        public void UsesSqlServerEscapeForColumns() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32, IsNullable = true };
            this.MakeTarget().AppendColumnSpecification(sb, col);

            Assert.Equal("[foo] int null", sb.ToString());
        }

        [Fact]
        public void BooleanColumnHasBitType() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.Boolean });
            Assert.Equal("[foo] bit not null", actual);
        }

        [Fact]
        public void DateTime2ColumnHasDateTime2Type() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.DateTime2 });
            Assert.Equal("[foo] datetime2 not null", actual);
        }

        [Fact]
        public void GuidColumnHasUniqueidentifierType() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.Guid });
            Assert.Equal("[foo] uniqueidentifier not null", actual);
        }

        [Fact]
        public void ObjectColumnHasSqlVariantType() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.Object });
            Assert.Equal("[foo] sql_variant not null", actual);
        }

        [Fact]
        public void AutoGeneratedColumnHasIdentityClause() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.Int32, IsAutoGenerated = true });
            Assert.Equal("[foo] int not null identity(1,1)", actual);
        }

        private string GetColumnSpec(IColumn col) {
            var sb = new StringBuilder();
            this.MakeTarget().AppendColumnSpecification(sb, col);
            return sb.ToString();
        }

        private SqlServerDialect MakeTarget() {
            return new SqlServerDialect();
        }
    }
}