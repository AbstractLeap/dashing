namespace Dashing.Tools.Migration {
    using System.Collections.Generic;
    using System.Linq;

    using Dashing.Configuration;

    public class MigrationPair {
        public IMap From { get; private set; }

        public IMap To { get; private set; }

        public bool RequiresUpdate(out string message) {
            var fromColumns = this.From.OwnedColumns(true).ToDictionary(c => c.DbName, c => c);
            var toColumns = this.To.OwnedColumns(true).ToDictionary(c => c.DbName, c => c);

            // check for change in columns
            var addedColumns = toColumns.Keys.Except(fromColumns.Keys).ToArray();
            var removedColumns = fromColumns.Keys.Except(toColumns.Keys).ToArray();
            if (addedColumns.Any() || removedColumns.Any()) {
                message = string.Empty;

                if (addedColumns.Any()) {
                    message += string.Format("added columns: {0}", string.Join(", ", removedColumns));    
                }

                if (removedColumns.Any()) {
                    message += string.Format("removed columns: {0}", string.Join(", ", removedColumns));
                }

                return true;
            }

            foreach (var fromColumnPair in fromColumns) {
                var fromColumn = fromColumnPair.Value;
                var toColumn = this.To.Columns.Single(c => c.Value.DbName == fromColumn.DbName).Value;

                if (fromColumn.Relationship == RelationshipType.ManyToOne
                    && toColumn.Relationship == RelationshipType.ManyToOne
                    && fromColumn.Type.Name != toColumn.Type.Name) {
                    message = string.Format(
                        "{0} has changed association from {1} to {2}",
                        fromColumn.Name,
                        fromColumn.Type.Name,
                        toColumn.Type.Name);
                    return true;
                }

                if (fromColumn.DbName != toColumn.DbName
                    || fromColumn.DbType != toColumn.DbType
                    || fromColumn.IsAutoGenerated != toColumn.IsAutoGenerated
                    || fromColumn.IsNullable != toColumn.IsNullable
                    || fromColumn.IsPrimaryKey != toColumn.IsPrimaryKey) {
                    message = string.Format("{0} has changed type, nullability, primary key or autogeneration status", fromColumn.Name);
                    return true;
                }

                if (this.To.Configuration.Engine.SqlDialect.TypeTakesLength(fromColumn.DbType)
                    && (fromColumn.MaxLength != toColumn.MaxLength || (!fromColumn.MaxLength && fromColumn.Length != toColumn.Length))) {
                    message = string.Format("{0} has changed length", fromColumn.Name);
                    return true;
                }

                if (this.To.Configuration.Engine.SqlDialect.TypeTakesPrecisionAndScale(fromColumn.DbType)
                    && (fromColumn.Scale != toColumn.Scale || fromColumn.Precision != toColumn.Precision)) {
                    message = string.Format("{0} has changed scale or precision", fromColumn.Name);
                    return true;
                }
            }

            message = string.Empty;
            return false;
        }

        public static MigrationPair Of(IMap from, IMap to) {
            return new MigrationPair { From = @from, To = to };
        }
    }
}