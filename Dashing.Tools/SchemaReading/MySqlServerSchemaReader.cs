namespace Dashing.Tools.SchemaReading {
    class MySqlServerSchemaReader : BaseSchemaReader {
        protected override string GetForeignKeySql(string databaseName) {
            return @"
    select i.table_name as TableName,
            i.constraint_name as Name,
            k.column_name as ColumnName,
            k.referenced_table_name as ReferencedTableName,
            k.referenced_column_name as ReferencedColumnName
    from information_schema.table_constraints i
        left join information_schema.key_column_usage k
            on i.constraint_name = k.constraint_name
    where i.TABLE_SCHEMA = database()
        and k.TABLE_SCHEMA = database()
        and i.CONSTRAINT_TYPE = 'FOREIGN KEY'";
        }

        protected override string GetIndexSql() {
            return @"
    select table_name as TableName,
            index_name as Name,
            column_name as ColumnName,
            seq_in_index as ColumnId,
            case when non_unique = 1 then 0 else 1 end as IsUnique
    from information_schema.statistics
    where table_schema = database() and index_name <> 'PRIMARY';
";
        }

        protected override string GetColumnSql() {
            return @"
    select table_name as TableName,
            column_name as Name,
            ordinal_position as OrdinalPosition,
            case when column_type = 'tinyint(1)' then 'bool' else data_type end as DbTypeName,
            numeric_precision as `Precision`,
            numeric_scale as Scale,
            case when CHARACTER_MAXIMUM_LENGTH = -1 then 1 else 0 end AS MaxLength,
            CHARACTER_MAXIMUM_LENGTH as Length,
            COLUMN_DEFAULT AS `Default`,
            DATETIME_PRECISION AS DatePrecision,
            CASE IS_NULLABLE
                WHEN 'NO' THEN 0
                ELSE 1
            END AS IsNullable,
            case when extra like '%auto_increment%' then 1 else 0 end as IsAutoGenerated,
            case when column_key = 'PRI' then 1 else 0 end as IsPrimaryKey
    from information_schema.columns
    where table_schema = database();
";
        }

        protected override string GetTableSql() {
            return "select table_name as `Name` from INFORMATION_SCHEMA.TABLES where table_schema = @DatabaseName";
        }
    }
}