namespace Dashing.Tests.Configuration {
    using System;

    using Dashing.Configuration;
    using Dashing.Tests.TestDomain;

    using Xunit;

    public class DefaultConventionTests {
        [Fact]
        public void DefaultTableNameIsThePlural() {
            var target = this.MakeTarget();
            Assert.Equal("Posts", target.TableFor(typeof(Post)));
        }

        [Fact]
        public void DefaultSchemaIsNull() {
            var target = this.MakeTarget();
            Assert.Null(target.SchemaFor(typeof(Post)));
        }

        [Fact]
        public void IdIsPickedAsPrimaryKey() {
            var target = this.MakeTarget();
            var primaryKey = target.PrimaryKeyFor(typeof(Post), new[] { "Id", "SomeOtherProperty" });
            Assert.Equal("Id", primaryKey);
        }

        [Fact]
        public void IdIsPickedAsPrimaryKeyCaseInsensitively() {
            var target = this.MakeTarget();
            var primaryKey1 = target.PrimaryKeyFor(typeof(Post), new[] { "ID", "SomeOtherProperty" });
            Assert.Equal("ID", primaryKey1);
            var primaryKey2 = target.PrimaryKeyFor(typeof(Post), new[] { "id", "SomeOtherProperty" });
            Assert.Equal("id", primaryKey2);
        }

        [Fact]
        public void EntityNamePlusIdIsPickedAsPrimaryKey() {
            var target = this.MakeTarget();
            var primaryKey = target.PrimaryKeyFor(typeof(Post), new[] { "PostId", "SomeOtherProperty" });
            Assert.Equal("PostId", primaryKey);
        }

        [Fact]
        public void EntityNamePlusIdIsPickedAsPrimaryKeyCaseInsensitively() {
            var target = this.MakeTarget();
            var primaryKey = target.PrimaryKeyFor(typeof(Post), new[] { "PoStiD", "SomeOtherProperty" });
            Assert.Equal("PoStiD", primaryKey);
        }

        [Fact]
        public void EntityNamePlusIdHasPrecedenceOverJustIdAsPrimaryKey() {
            var target = this.MakeTarget();
            var primaryKey = target.PrimaryKeyFor(typeof(Post), new[] { "Id", "PostId", "SomeOtherProperty" });
            Assert.Equal("PostId", primaryKey);
        }

        [Fact]
        public void DefaultsToAutoGeneratedPrimaryKeysForInt() {
            var target = this.MakeTarget();
            Assert.True(target.IsPrimaryKeyAutoGenerated(new Column<int>()));
        }

        [Fact]
        public void DefaultsToAutoGeneratedPrimaryKeysForLong() {
            var target = this.MakeTarget();
            Assert.True(target.IsPrimaryKeyAutoGenerated(new Column<long>()));
        }

        [Fact]
        public void DefaultsToNotAutogeneratedForStringPrimaryKey() {
            var target = this.MakeTarget();
            Assert.False(target.IsPrimaryKeyAutoGenerated(new Column<string>()));
        }

        [Fact]
        public void DefaultsToAutogeneratedForGuidPrimaryKey() {
            var target = this.MakeTarget();
            Assert.True(target.IsPrimaryKeyAutoGenerated(new Column<Guid>()));
        }

        [Fact]
        public void DefaultStringLengthIs255() {
            var target = this.MakeTarget();
            Assert.Equal(255, target.StringLengthFor(typeof(Post), null));
        }

        [Fact]
        public void DefaultDecimalPrecisionIs18() {
            var target = this.MakeTarget();
            Assert.Equal(18, target.DecimalPrecisionFor(typeof(Post), null));
        }

        [Fact]
        public void DefaultDecimalScaleIs10() {
            var target = this.MakeTarget();
            Assert.Equal(10, target.DecimalScaleFor(typeof(Post), null));
        }

        private DefaultConvention MakeTarget() {
            return new DefaultConvention();
        }
    }
}