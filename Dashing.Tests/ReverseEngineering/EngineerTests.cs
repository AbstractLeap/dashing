namespace Dashing.Tools.Tests.ReverseEngineering {
    using Dashing.Configuration;
    using Dashing.ReverseEngineering;
    using System.Collections.Generic;
    using System.Linq;

    using Dashing.Engine.Dialects;
    using Dashing.SchemaReading;

    using Xunit;

    public class EngineerTests {
        [Fact]
        public void PrimaryKeySetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("PostId", maps.First(m => m.Table == "Posts").PrimaryKey.Name);
        }

        [Fact]
        public void AutoIncSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").PrimaryKey.IsAutoGenerated);
        }

        [Fact]
        public void ManyToOneSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").Columns.First(c => c.Key == "Blog").Value.Relationship == RelationshipType.ManyToOne);
        }

        [Fact]
        public void PeopleSingularized() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetPeopleSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("Person", maps.First().Type.Name);
        }

        [Fact]
        public void OneToOneRelationshipSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "Customers").Columns["Person"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "People").Columns["Customer"].Relationship);
        }

        [Fact]
        public void OneToOneOppositeColumnSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("Customer", maps.First(m => m.Table == "Customers").Columns["Person"].OppositeColumn.Name);
            Assert.Equal("Person", maps.First(m => m.Table == "People").Columns["Customer"].OppositeColumn.Name);
        }

        [Fact]
        public void OneToOneSelfReferencingRelationshipSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["References"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["ReferencedBy"].Relationship);
        }

        [Fact]
        public void OneToOneSelfReferencingOppositeColumnSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("ReferencedBy", maps.First().Columns["References"].OppositeColumn.Name);
            Assert.Equal("References", maps.First().Columns["ReferencedBy"].OppositeColumn.Name);
        }

        [Fact]
        public void SelfReferencingOneToManyWorks() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToManySchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.ManyToOne, maps.First().Columns["Parent"].Relationship);
        }

        private Database GetPeopleSchema() {
            var peopleTable = new TableDto { Name = "People" };
            var tables = new List<TableDto> { peopleTable };
            var columns = new List<ColumnDto> {
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "PersonId",
                                                                    DbTypeName = "int",
                                                                    TableName = "People"
                                                                }
                                              };
            return new Database(tables, columns, null, null);
        }

        private Database GetSelfReferencingOneToManySchema() {
            var categoryTable = new TableDto { Name = "Categories" };
            var tables = new List<TableDto> { categoryTable };
            var columns = new List<ColumnDto> {
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "CategoryId",
                                                                    DbTypeName = "int",
                                                                    TableName = "Categories"
                                                                },
                                                  new ColumnDto { Name = "ParentId", DbTypeName = "int", TableName = "Categories" }
                                              };

            var foreignKeys = new List<ForeignKeyDto> {
                                                          new ForeignKeyDto {
                                                                                ColumnName = "ParentId",
                                                                                Name = "Parent",
                                                                                ReferencedColumnName = "CategoryId",
                                                                                TableName = "Categories",
                                                                                ReferencedTableName = "Categories"
                                                                            }
                                                      };
            return new Database(tables, columns, null, foreignKeys);
        }

        private Database GetSelfReferencingOneToOneSchema() {
            var tables = new List<TableDto> { new TableDto { Name = "Foo" } };
            var columns = new List<ColumnDto> {
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "FooId",
                                                                    DbTypeName = "int",
                                                                    TableName = "Foo"
                                                                },
                                                  new ColumnDto { Name = "ReferencesId", DbTypeName = "int", TableName = "Foo" },
                                                  new ColumnDto { Name = "ReferencedById", DbTypeName = "int", TableName = "Foo" }
                                              };
            var foreignKeys = new List<ForeignKeyDto> {
                                                          new ForeignKeyDto {
                                                                                ColumnName = "ReferencesId",
                                                                                Name = "Foo",
                                                                                ReferencedColumnName = "ReferencedById",
                                                                                TableName = "Foo",
                                                                                ReferencedTableName = "Foo"
                                                                            },
                                                          new ForeignKeyDto {
                                                                                ColumnName = "ReferencedById",
                                                                                Name = "Foo",
                                                                                ReferencedColumnName = "ReferencesId",
                                                                                TableName = "Foo",
                                                                                ReferencedTableName = "Foo"
                                                                            }
                                                      };
            return new Database(tables, columns, null, foreignKeys);
        }

        private Database GetOneToOneSchema() {
            var tables = new List<TableDto> { new TableDto { Name = "Customers" }, new TableDto { Name = "People" } };
            var columns = new List<ColumnDto> {
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "CustomerId",
                                                                    DbTypeName = "int",
                                                                    TableName = "Customers"
                                                                },
                                                  new ColumnDto { Name = "PersonId", DbTypeName = "int", TableName = "Customers" },
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "PersonId",
                                                                    DbTypeName = "int",
                                                                    TableName = "People"
                                                                },
                                                  new ColumnDto { Name = "CustomerId", DbTypeName = "int", TableName = "People" }
                                              };
            var foreignKeys = new List<ForeignKeyDto> {
                                                          new ForeignKeyDto {
                                                                                ColumnName = "PersonId",
                                                                                Name = "PersonId",
                                                                                ReferencedColumnName = "PersonId",
                                                                                TableName = "Customers",
                                                                                ReferencedTableName = "People"
                                                                            },
                                                          new ForeignKeyDto {
                                                                                ColumnName = "CustomerId",
                                                                                Name = "CustomerId",
                                                                                ReferencedColumnName = "CustomerId",
                                                                                TableName = "People",
                                                                                ReferencedTableName = "Customers"
                                                                            }
                                                      };

            return new Database(tables, columns, null, foreignKeys);
        }

        private Database GetSchema() {
            return this.MakeSchema();
        }

        private Database MakeSchema() {
            var tables = new List<TableDto> { new TableDto { Name = "Posts" }, new TableDto { Name = "Blogs" } };
            var columns = new List<ColumnDto> {
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "PostId",
                                                                    DbTypeName = "int",
                                                                    TableName = "Posts"
                                                                },
                                                  new ColumnDto { Name = "BlogId", DbTypeName = "int", TableName = "Posts" },
                                                  new ColumnDto {
                                                                    IsPrimaryKey = true,
                                                                    IsAutoGenerated = true,
                                                                    Name = "BlogId",
                                                                    DbTypeName = "int",
                                                                    TableName = "Blogs"
                                                                }
                                              };
            var foreignKeys = new List<ForeignKeyDto> {
                                                          new ForeignKeyDto {
                                                                                ColumnName = "BlogId",
                                                                                Name = "BlogId",
                                                                                ReferencedColumnName = "BlogId",
                                                                                TableName = "Posts",
                                                                                ReferencedTableName = "Blogs"
                                                                            }
                                                      };

            return new Database(tables, columns, null, foreignKeys);
        }
    }
}