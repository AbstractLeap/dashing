namespace Dashing.Tests.Engine {
    using System.Data;
    using System.Text;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;

    using Xunit;

    public class MySqlDialectBaseTests {
        [Fact]
        public void UsesMySqlEscapes() {
            var sb = new StringBuilder();
            this.MakeTarget().AppendQuotedName(sb, "foo");

            Assert.Equal("`foo`", sb.ToString());
        }

        [Fact]
        public void UsesMySqlEscapeForTables() {
            var sb = new StringBuilder();
            var map = new Map<int> { Table = "foo" };
            this.MakeTarget().AppendQuotedTableName(sb, map);

            Assert.Equal("`foo`", sb.ToString());
        }

        [Fact]
        public void UsesMySqlEscapeForColumns() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32, IsNullable = true };
            this.MakeTarget().AppendColumnSpecification(sb, col);

            Assert.Equal("`foo` int null", sb.ToString());
        }

        [Fact]
        public void AutoGeneratedColumnHasIdentityClause() {
            var actual = this.GetColumnSpec(new Column<int> { DbName = "foo", DbType = DbType.Int32, IsAutoGenerated = true });
            Assert.Equal("`foo` int not null auto_increment", actual);
        }

        private string GetColumnSpec(IColumn col) {
            var sb = new StringBuilder();
            this.MakeTarget().AppendColumnSpecification(sb, col);
            return sb.ToString();
        }

        private MySqlDialect MakeTarget() {
            return new MySqlDialect();
        }
    }
}