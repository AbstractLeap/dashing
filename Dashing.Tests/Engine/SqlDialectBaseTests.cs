namespace Dashing.Tests.Engine {
    using System.Data;
    using System.Text;

    using Dashing.Configuration;
    using Dashing.Engine;
    using Dashing.Engine.Dialects;

    using Xunit;

    public class SqlDialectBaseTests {
        [Fact]
        public void AppendQuotedNameAppendsNameInQuoteCharacters() {
            var sb = new StringBuilder();
            var target = this.MakeTarget();

            target.AppendQuotedName(sb, "name");

            Assert.Equal("<name>", sb.ToString());
        }

        [Fact]
        public void AppendQuotedTableNameAppendsTableNameInQuoteCharacters() {
            var sb = new StringBuilder();
            var map = new Map<string> { Table = "foo" };
            var target = this.MakeTarget();

            target.AppendQuotedTableName(sb, map);

            Assert.Equal("<foo>", sb.ToString());
        }

        [Fact]
        public void AppendEscapedAppendsEscapedString() {
            var sb = new StringBuilder();
            var target = this.MakeTarget();

            target.AppendEscaped(sb, "O'Callahan");

            Assert.Equal("O''Callahan", sb.ToString());
        }

        [Fact]
        public void AppendColumnSpecificationAppendsNameAndTypeAndNotNull() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32 };
            var target = this.MakeTarget();

            target.AppendColumnSpecification(sb, col);

            Assert.Equal("<foo> int not null", sb.ToString());
        }

        [Fact]
        public void AppendColumnSpecificationAppendsNameAndTypeAndNull() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32, IsNullable = true };
            var target = this.MakeTarget();

            target.AppendColumnSpecification(sb, col);

            Assert.Equal("<foo> int null", sb.ToString());
        }

        [Fact]
        public void AppendColumnSpecificationAppendsNameAndTypeAndPrimaryKey() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32, IsPrimaryKey = true };
            var target = this.MakeTarget();

            target.AppendColumnSpecification(sb, col);

            Assert.Equal("<foo> int not null primary key", sb.ToString());
        }

        [Fact]
        public void AppendColumnSpecificationAppendsNameAndIdentityAndPrimaryKey() {
            var sb = new StringBuilder();
            var col = new Column<int> { DbName = "foo", DbType = DbType.Int32, IsPrimaryKey = true, IsAutoGenerated = true };
            var target = this.MakeTarget();

            target.AppendColumnSpecification(sb, col);

            Assert.Equal("<foo> int not null generated always as identity primary key", sb.ToString());
        }

        private TestDialect MakeTarget() {
            return new TestDialect();
        }

        private class TestDialect : SqlDialectBase {
            public TestDialect()
                : base('<', '>') { }
        }
    }
}