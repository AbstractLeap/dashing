using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DatabaseSchemaReader;
using DatabaseSchemaReader.DataSchema;
using TopHat.Configuration;

namespace TopHat.Tools.ReverseEngineering
{
    public class Engineer : IEngineer
    {
        public IEnumerable<IMap> ReverseEngineer(IDatabaseReader databaseReader)
        {
            var schema = databaseReader.ReadAll();
            var maps = new List<IMap>();
            foreach (var table in schema.Tables)
            {
                maps.Add(this.MapTable(table));
            }

            return maps;
        }

        private IMap MapTable(DatabaseTable table)
        {
            var map = new Map<object>();
            map.Table = table.Name;
            foreach (var column in table.Columns)
            {
                map.Columns.Add(this.MapColumn(map, column));
            }

            return map;
        }

        private KeyValuePair<string, IColumn> MapColumn(IMap map, DatabaseColumn column)
        {
            var result = new KeyValuePair<string, IColumn>(column.Name, new Column<object>());
            var mapColumn = result.Value;
            mapColumn.DbName = column.Name;
            mapColumn.DbType = (System.Data.DbType)column.DataType.ProviderDbType;
            mapColumn.IsAutoGenerated = column.IsIdentity;
            mapColumn.IsExcludedByDefault = false;
            mapColumn.IsIgnored = false;
            mapColumn.IsNullable = column.Nullable;
            mapColumn.IsPrimaryKey = column.IsPrimaryKey;
            if (mapColumn.IsPrimaryKey)
            {
                map.PrimaryKey = mapColumn;
            }

            if (column.Length.HasValue)
            {
                mapColumn.Length = (ushort)column.Length.Value;
            }

            if (column.Precision.HasValue)
            {
                mapColumn.Precision = (byte)column.Precision.Value;
            }

            if (column.Scale.HasValue)
            {
                mapColumn.Scale = (byte)column.Scale.Value;
            }

            mapColumn.Map = map;
            mapColumn.Name = column.Name;
            
            // figure out the relationship
            if (column.IsForeignKey)
            {
                mapColumn.Relationship = RelationshipType.ManyToOne;
            }
            else
            {
                mapColumn.Relationship = RelationshipType.None;
            }

            return result;
        }
    }
}
