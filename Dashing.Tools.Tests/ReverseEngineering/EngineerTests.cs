namespace Dashing.Tools.Tests.ReverseEngineering {
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;
    using Dashing.Tools.ReverseEngineering;
    using Dashing.Tools.SchemaReading;

    using Xunit;

    public class EngineerTests {
        [Fact]
        public void PrimaryKeySetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("PostId", maps.First(m => m.Table == "Posts").PrimaryKey.Name);
        }

        [Fact]
        public void AutoIncSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").PrimaryKey.IsAutoGenerated);
        }

        [Fact]
        public void ManyToOneSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").Columns.First(c => c.Key == "Blog").Value.Relationship == RelationshipType.ManyToOne);
        }

        [Fact]
        public void PeopleSingularized() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetPeopleSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("Person", maps.First().Type.Name);
        }

        [Fact]
        public void OneToOneRelationshipSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "Customers").Columns["Person"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "People").Columns["Customer"].Relationship);
        }

        [Fact]
        public void OneToOneOppositeColumnSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("Customer", maps.First(m => m.Table == "Customers").Columns["Person"].OppositeColumn.Name);
            Assert.Equal("Person", maps.First(m => m.Table == "People").Columns["Customer"].OppositeColumn.Name);
        }

        [Fact]
        public void OneToOneSelfReferencingRelationshipSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["References"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["ReferencedBy"].Relationship);
        }

        [Fact]
        public void OneToOneSelfReferencingOppositeColumnSetCorrectly() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("ReferencedBy", maps.First().Columns["References"].OppositeColumn.Name);
            Assert.Equal("References", maps.First().Columns["ReferencedBy"].OppositeColumn.Name);
        }

        [Fact]
        public void SelfReferencingOneToManyWorks() {
            var engineer = new Engineer((IDictionary<string, string>)null);
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToManySchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.ManyToOne, maps.First().Columns["Parent"].Relationship);
        }

        private Database GetPeopleSchema() {
            var schema = new Database();
            var peopleTable = new TableDto { Name = "People" };
            schema.Tables = new List<TableDto>{ peopleTable };
            schema.Columns = new List<ColumnDto> { new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "PersonId", DbType = DbType.Int32, TableName = "People"} };
            return schema;
        }

        private Database GetSelfReferencingOneToManySchema() {
            var schema = new Database();
            var categoryTable = new TableDto() { Name = "Categories" };
            schema.Tables = new List<TableDto> { categoryTable };
            schema.Columns = new List<ColumnDto> {
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "CategoryId", DbType = DbType.Int32, TableName = "Categories" },
                                                     new ColumnDto { Name = "ParentId", DbType = DbType.Int32, TableName = "Categories" }
                                                 };

            schema.ForeignKeys = new List<ForeignKeyDto> {
                                                             new ForeignKeyDto { ColumnName = "ParentId", Name = "Parent", ReferencedColumnName = "CategoryId", TableName = "Categories", ReferencedTableName = "Categories"}
                                                         };
            return schema;
        }

        private Database GetSelfReferencingOneToOneSchema() {
            var schema = new Database();
            schema.Tables = new List<TableDto> { new TableDto { Name = "Foo" } };
            schema.Columns = new List<ColumnDto> {
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "FooId", DbType = DbType.Int32, TableName = "Foo" },
                                                     new ColumnDto { Name = "ReferencesId", DbType = DbType.Int32, TableName = "Foo" },
                                                     new ColumnDto { Name = "ReferencedById", DbType = DbType.Int32, TableName = "Foo" }
                                                 };
            schema.ForeignKeys = new List<ForeignKeyDto> {
                                                             new ForeignKeyDto { ColumnName = "ReferencesId", Name = "Foo", ReferencedColumnName = "ReferencedById", TableName = "Foo", ReferencedTableName = "Foo"},
                                                             new ForeignKeyDto { ColumnName = "ReferencedById", Name = "Foo", ReferencedColumnName = "ReferencesId", TableName = "Foo", ReferencedTableName = "Foo"}
                                                         };
            return schema;
        }

        private Database GetOneToOneSchema() {
            var schema = new Database();
            schema.Tables = new List<TableDto> {
                                                   new TableDto { Name = "Customers" },
                                                   new TableDto { Name = "People" }
                                               };
            schema.Columns = new List<ColumnDto> {
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "CustomerId", DbType = DbType.Int32, TableName = "Customers" },
                                                     new ColumnDto { Name = "PersonId", DbType = DbType.Int32, TableName = "Customers" },
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "PersonId", DbType = DbType.Int32, TableName = "People" },
                                                     new ColumnDto { Name = "CustomerId", DbType = DbType.Int32, TableName = "People" }
                                                 };
            schema.ForeignKeys = new List<ForeignKeyDto> {
                                                             new ForeignKeyDto { ColumnName = "PersonId", Name = "PersonId", ReferencedColumnName = "PersonId", TableName = "Customers", ReferencedTableName = "People"},
                                                             new ForeignKeyDto { ColumnName = "CustomerId", Name = "CustomerId", ReferencedColumnName = "CustomerId", TableName = "People", ReferencedTableName = "Customers"}
                                                         };

            return schema;
        }

        private Database GetSchema() {
            return this.MakeSchema();
        }

        private Database MakeSchema() {
            var schema = new Database();
            schema.Tables = new List<TableDto> {
                                                   new TableDto { Name = "Posts" },
                                                   new TableDto { Name = "Blogs" }
                                               };
            schema.Columns = new List<ColumnDto> {
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "PostId", DbType = DbType.Int32, TableName = "Posts" },
                                                     new ColumnDto { Name = "BlogId", DbType = DbType.Int32, TableName = "Posts" },
                                                     new ColumnDto { IsPrimaryKey = true, IsAutoGenerated = true, Name = "BlogId", DbType = DbType.Int32, TableName = "Blogs" }
                                                 };
            schema.ForeignKeys = new List<ForeignKeyDto> {
                                                             new ForeignKeyDto { ColumnName = "BlogId", Name = "BlogId", ReferencedColumnName = "BlogId", TableName = "Posts", ReferencedTableName = "Blogs"}
                                                         };

            return schema;
        }
    }
}