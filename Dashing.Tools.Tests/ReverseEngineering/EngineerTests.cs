namespace Dashing.Tools.Tests.ReverseEngineering {
    using System.Collections.Generic;
    using System.Linq;

    using Dashing.Configuration;
    using Dashing.Engine.Dialects;
    using Dashing.Tools.ReverseEngineering;

    using DatabaseSchemaReader.DataSchema;

    using Xunit;

    public class EngineerTests {
        [Fact]
        public void PrimaryKeySetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("PostId", maps.First(m => m.Table == "Posts").PrimaryKey.Name);
        }

        [Fact]
        public void AutoIncSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").PrimaryKey.IsAutoGenerated);
        }

        [Fact]
        public void ManyToOneSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSchema(), new SqlServerDialect(), null, null, false);
            Assert.True(maps.First(m => m.Table == "Posts").Columns.First(c => c.Key == "Blog").Value.Relationship == RelationshipType.ManyToOne);
        }

        [Fact]
        public void PeopleSingularized() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetPeopleSchema(), new SqlServerDialect(), null, null, false);
            Assert.Equal("Person", maps.First().Type.Name);
        }

        [Fact]
        public void OneToOneRelationshipSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "Customers").Columns["Person"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First(m => m.Table == "People").Columns["Customer"].Relationship);
        }

        [Fact]
        public void OneToOneOppositeColumnSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("Customer", maps.First(m => m.Table == "Customers").Columns["Person"].OppositeColumn.Name);
            Assert.Equal("Person", maps.First(m => m.Table == "People").Columns["Customer"].OppositeColumn.Name);
        }

        [Fact]
        public void OneToOneSelfReferencingRelationshipSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["References"].Relationship);
            Assert.Equal(RelationshipType.OneToOne, maps.First().Columns["ReferencedBy"].Relationship);
        }

        [Fact]
        public void OneToOneSelfReferencingOppositeColumnSetCorrectly() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToOneSchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal("ReferencedBy", maps.First().Columns["References"].OppositeColumn.Name);
            Assert.Equal("References", maps.First().Columns["ReferencedBy"].OppositeColumn.Name);
        }

        [Fact]
        public void SelfReferencingOneToManyWorks() {
            var engineer = new Engineer(new List<KeyValuePair<string, string>>());
            var maps = engineer.ReverseEngineer(this.GetSelfReferencingOneToManySchema(), new SqlServerDialect(), null, null, true);
            Assert.Equal(RelationshipType.ManyToOne, maps.First().Columns["Parent"].Relationship);
        }

        private DatabaseSchema GetPeopleSchema() {
            var schema = new DatabaseSchema(string.Empty, SqlType.SqlServer);
            var peopleTable = new DatabaseTable { Name = "People" };

            peopleTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "PersonId", DataType = new DataType("int", "System.Int32") });

            schema.Tables.Add(peopleTable);
            return schema;
        }

        private DatabaseSchema GetSelfReferencingOneToManySchema() {
            var schema = new DatabaseSchema(string.Empty, SqlType.SqlServer);
            var categoryTable = new DatabaseTable { Name = "Categories" };

            categoryTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "CategoryId", DataType = new DataType("int", "System.Int32") });
            categoryTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "ParentId",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "Categories",
                                       DataType = new DataType("int", "System.Int32")
                                   });

            schema.Tables.Add(categoryTable);
            return schema;
        }

        private DatabaseSchema GetSelfReferencingOneToOneSchema() {
            var schema = new DatabaseSchema(string.Empty, SqlType.SqlServer);
            var fooTable = new DatabaseTable { Name = "Foo" };

            fooTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "FooId", DataType = new DataType("int", "System.Int32") });
            fooTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "ReferencesId",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "Foo",
                                       DataType = new DataType("int", "System.Int32")
                                   });
            fooTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "ReferencedById",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "Foo",
                                       DataType = new DataType("int", "System.Int32")
                                   });

            schema.Tables.Add(fooTable);
            return schema;
        }

        private DatabaseSchema GetOneToOneSchema() {
            var schema = new DatabaseSchema(string.Empty, SqlType.SqlServer);
            var customerTable = new DatabaseTable { Name = "Customers" };
            var peopleTable = new DatabaseTable { Name = "People" };

            customerTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "CustomerId", DataType = new DataType("int", "System.Int32") });
            customerTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "PersonId",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "People",
                                       DataType = new DataType("int", "System.Int32")
                                   });
            peopleTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "PersonId", DataType = new DataType("int", "System.Int32") });
            peopleTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "CustomerId",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "Customers",
                                       DataType = new DataType("int", "System.Int32")
                                   });

            schema.Tables.Add(peopleTable);
            schema.Tables.Add(customerTable);
            return schema;
        }

        private DatabaseSchema GetSchema() {
            return this.MakeSchema();
        }

        private DatabaseSchema MakeSchema() {
            var schema = new DatabaseSchema(string.Empty, SqlType.SqlServer);
            var postTable = new DatabaseTable { Name = "Posts" };
            var blogsTable = new DatabaseTable { Name = "Blogs" };

            postTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "PostId", DataType = new DataType("int", "System.Int32") });
            postTable.Columns.Add(
                new DatabaseColumn {
                                       Name = "BlogId",
                                       IsForeignKey = true,
                                       ForeignKeyTableName = "Blogs",
                                       DataType = new DataType("int", "System.Int32")
                                   });
            blogsTable.Columns.Add(
                new DatabaseColumn { IsAutoNumber = true, IsPrimaryKey = true, Name = "BlogId", DataType = new DataType("int", "System.Int32") });

            schema.Tables.Add(postTable);
            schema.Tables.Add(blogsTable);
            return schema;
        }
    }
}